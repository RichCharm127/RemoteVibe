/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void slider1_change1(GSlider source, GEvent event) { //_CODE_:slider1:735620:
  //println("slider1 - GSlider >> GEvent." + event + " @ " + millis() + "\t" + source.getValueI());
  try{
    sendData.write((char)source.getValueI());
  } catch (IOException e){}
} //_CODE_:slider1:735620:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setCursor(ARROW);
  surface.setTitle("Sketch Window");
  slider1 = new GSlider(this, 10, 60, 480, 80, 20.0);
  slider1.setShowValue(true);
  slider1.setShowLimits(true);
  slider1.setLimits(0, 0, 255);
  slider1.setNbrTicks(255);
  slider1.setStickToTicks(true);
  slider1.setNumberFormat(G4P.INTEGER, 0);
  slider1.setLocalColorScheme(GCScheme.GOLD_SCHEME);
  slider1.setOpaque(false);
  slider1.addEventHandler(this, "slider1_change1");
}

// Variable declarations 
// autogenerated do not edit
GSlider slider1; 
